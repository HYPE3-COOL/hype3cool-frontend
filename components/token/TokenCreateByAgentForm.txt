'use client';

// react & next
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';

// form
import * as yup from 'yup';
import { FormProvider, useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';

import { showMessage } from '@/utils/toast';

import { Button } from '@chakra-ui/react';
import { InputField, TextAreaField, DateTimePicker, DateTimePickerWithCheckbox } from '@/components/form';

import { useMutation } from '@tanstack/react-query';
import { CoinService } from '@/lib/api/coinService';
import { AxiosError } from 'axios';
import BaseDropzone, { IUploadMedia } from '@/components/coin/elements/BaseDropzone';

const schema = yup.object().shape({
    imageUri: yup.string(),
    name: yup.string().required('Agent name is required'),
    symbol: yup.string().required('Ticker is required'),
    description: yup.string().required('Agent description is required'),
    presaleEndAt: yup.string().required('Presale End Time is required'), // datepicker
    enablePresaleStartAt: yup.boolean(),
    presaleStartAt: yup.string().when('enablePresaleStartAt', ([enablePresaleStartAt], schema) => {
        return enablePresaleStartAt ? schema.required('Presale Start Time is required') : schema.notRequired();
    }),
});

const TokenCreateByAgentForm = () => {
    const router = useRouter();
    const methods = useForm({
        resolver: yupResolver(schema),
        defaultValues: {
            imageUri: '',
            name: '',
            symbol: '',
            description: '',
            presaleEndAt: '',
            enablePresaleStartAt: false,
            presaleStartAt: '',
        },
    });

    const coinService = new CoinService();

    const { mutate } = useMutation({
        mutationFn: (data: any) => coinService.createByAgent(data),
        onError: (error: any) => {
            if (error instanceof AxiosError) {
                showMessage(error?.response?.data?.message, 'error');
            } else {
                showMessage(error.message, 'error');
            }
        },
        onSuccess: () => {
            showMessage('Token created by Agent successfully', 'success');
            methods.reset();
            router.push('/token-create');
        },
    });

    const onSubmit = async (formData: any) => {
        formData.presaleEndAt = new Date(formData.presaleEndAt).toISOString();
        if (formData.enablePresaleStartAt) {
            formData.presaleStartAt = new Date(formData.presaleStartAt).toISOString();
        } else {
            formData.presaleStartAt = new Date().toISOString();
        }

        delete formData.enablePresaleStartAt;

        mutate(formData);
    };

    const [uploadMedia, setUploadMedia] = useState<IUploadMedia>({});
    useEffect(() => {
        if (uploadMedia?.url) {
            methods.setValue('imageUri', uploadMedia.url);
            showMessage('Image uploaded successfully', 'success');
        }
    }, [uploadMedia, methods]);

    return (
        <FormProvider {...methods}>
            <form onSubmit={methods.handleSubmit(onSubmit)} className="form" noValidate>
                <div className="max-w-[1024px] mx-auto relative">
                    <div className="grid grid-cols-1 gap-x-[64px]">
                        <div className="left-form-input">
                            <div className="mb-6">
                                <div className="form-label py-3">Ticker Icon</div>
                                <div className="flex gap-5 justify-between mt-2 mb-3 text-sm font-semibold tracking-normal leading-5 whitespace-nowrap text-white/50 ">
                                    <BaseDropzone path="uploads" mediaUri={{}} setMediaUri={setUploadMedia} width={100} height={100} />
                                </div>
                            </div>
                            <div className="relative mb-6">
                                <InputField label="Token Name" name="name" placeholder="" isRequired />
                            </div>
                            <div className="relative mb-6">
                                <InputField label="Ticker" name="symbol" placeholder="" isRequired />
                            </div>
                            <div className="relative mb-6">
                                <TextAreaField label="Description" name="description" isRequired />
                            </div>

                            <div className="relative mb-6">
                                <DateTimePicker label="Presale End Time" name="presaleEndAt" />
                            </div>
                            <div className="relative mb-6">
                                <DateTimePickerWithCheckbox label="Presale Has Start Time?" name="presaleStartAt" checkboxName="enablePresaleStartAt" />
                            </div>
                        </div>
                    </div>
                </div>

                <div className="flex flex-col items-center gap-5 py-4">
                    <Button
                        type="submit"
                        className="hype3-btn-secondary hype3-bg-light-to-teal w-fit"
                        // isDisabled={createCoinStatus === 'loading'}
                        sx={{
                            cursor: 'not-allowed',
                            '&:disabled': {
                                bg: 'gray.400',
                                color: '.100',
                            },
                        }}
                    >
                        Create Token
                    </Button>
                </div>
            </form>
        </FormProvider>
    );
};

export default TokenCreateByAgentForm;

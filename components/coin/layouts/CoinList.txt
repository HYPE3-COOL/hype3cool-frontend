'use client';
import React, { Fragment, useEffect, useRef, useState } from 'react';

// hooks
import { useChatRoom } from '@/hooks/useChatRoom';

// ui
import { Field, Label, Radio, RadioGroup } from '@headlessui/react';
import CoinCard from '@/components/coin/elements/CoinCard';
import SoldCoinCard from '@/components/coin/elements/SoldCoinCard';
import styled from 'styled-components';

// redux
import { dispatch, useSelector } from '@/store';
import { getAllCoins, getAllCoinsReset } from '@/store/slices/coin';

// types
import { Coin } from 'types/types';
import Link from 'next/link';
import { CoinDataProvider } from '../CoinDataProvider';
import { useRouter, useSearchParams } from 'next/navigation';
// import { useGetCoins } from '@/hooks/useGetCoins';
import TokenFilterButtonGroup from '@/components/layouts/home/TokenFilterButtonGroup';
import { FilterButton } from '@/components/layouts/home/FilterButton';
import { useGetCoins } from '@/hooks/useToken';
import SortDirectionMenu from '../SortDirectionMenu';
import SortByDropMenu from '../SortByDropMenu';

const CardContainer = styled.div`
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 40px 80px;

    @media (max-width: 768px) {
        gap: 20px 20px;
    }
`;

const typeOptions = [
    { name: 'ðŸ’¥ New Agents', value: 'all' },
    { name: 'âœ… LP Created', value: 'created' },
    { name: 'ðŸš€ Presale Live', value: 'presale' },
];

const sortByOptions = [
    { label: 'Agent Creation', value: 'agent' },
    { label: 'LP Creation', value: 'lp' },
    { label: 'Presale Live', value: 'presale' },
    { label: 'Market Cap', value: 'mv' },
];

const sortDirectionOptions = [
    { label: 'Ascending', value: 'asc' },
    { label: 'Descending', value: 'desc' },
];

type CoinListProps = {
    // fullScreen?: boolean;
    // selectedButton: string;
};

const COINS_PER_PAGE = 12;

const CoinList = () => {
    const router = useRouter();
    
    const searchParams = useSearchParams();

    // const [type, setType] = useState(searchParams.get('type') || 'all');
    const [type, setType] = useState('all');
    const [sortBy, setSortBy] = useState<string>(sortByOptions[0].value);
    const [sortDirection, setSortDirection] = useState<string>(sortDirectionOptions[0].value);

    const { data: coins, error, isLoading } = useGetCoins({ type });

    if (isLoading) return <div>Loading...</div>;
    if (error) return <div>Error: {error.message}</div>;

    const handleCardClick = (mint: string) => {
        router.push(`/token/${mint}`);
    };

    // useEffect(() => {
    //     const sortByQueryOption = searchParams.get('sortBy');
    //     if (sortByQueryOption) {
    //         setSortBy(sortByQueryOption);
    //     }

    //     const sortDirectionQueryOption = searchParams.get('sortDirection');
    //     if (sortDirectionQueryOption) {
    //         setSortDirection(sortDirectionQueryOption);
    //     }
    // }, [searchParams]);

    // sort by
    const handleSortBySelect = (value: string) => {
        setSortBy(value);
        const params = new URLSearchParams(window.location.search);
        params.set('sortBy', value);
        router.push(`?${params.toString()}`);
    };

    // sort direction
    const handleSortDirectionSelect = (value: string) => {
        setSortDirection(value);
        const params = new URLSearchParams(window.location.search);
        params.set('sortDirection', value);
        router.push(`?${params.toString()}`);
    };

    return (
        <Fragment>
            <div className="mb-16 flex flex-col justify-between items-start lg:flex-row lg:justify-between lg:items-center gap-4">
                <div className="flex flex-row space-x-[14px] overflow-x-auto">
                    <RadioGroup value={type} onChange={setType} aria-label="Server size" className="flex flex-row space-x-[14px] overflow-x-auto">
                        {typeOptions.map((typeOption) => (
                            <Radio key={typeOption.name} value={typeOption.value} className="group relative flex flex-row cursor-pointer">
                                <div
                                    className={`py-3 px-6 bg-slate-400/10 hover:bg-blue-200 text-white hover:text-black rounded-full text-nowrap inline-flex items-center gap-3 active:bg-blue-200 active:text-black cursor-pointer
                                     group-data-[checked]:bg-blue-200 group-data-[checked]:text-black`}
                                >
                                    <div className="text-center text-xs xs:text-sm sm:text-base font-semibold font-figtree md:text-base">{typeOption.name}</div>
                                </div>
                            </Radio>
                        ))}
                    </RadioGroup>
                </div>
                <div className="flex flex-row space-x-[14px]">
                    <SortByDropMenu label="Sort" options={sortByOptions} selectedOption={sortBy} handleSelect={handleSortBySelect} />
                    <SortDirectionMenu />
                </div>
            </div>
            <CardContainer>
                {coins &&
                    coins.map((coin: Coin, index: number) => (
                        <div className="flex-shrink-0 w-[420px] mb-4" key={coin.mint}>
                            <div key={coin.mint} className="coin-item cursor-pointer" onClick={() => handleCardClick(coin.mint)}>
                                {coin?.isCreated ? <SoldCoinCard coin={coin} /> : <CoinCard coin={coin} />}
                            </div>
                        </div>
                    ))}
            </CardContainer>
            {/* {page < Math.ceil(coins.length / COINS_PER_PAGE) && (
                <div ref={loadMoreRef} className="mt-16 h-[100px] flex items-center justify-center">
                    <button
                        type="button"
                        className="hype3-icon-text-btn text-sm text-blue-400 font-semibold bg-blue-400/10 h-button h-button-border"
                        onClick={handleLoadMore}
                        disabled={isLoading && getAllCoinsStatus === 'loading'}
                    >
                        {isLoading ? 'Loading...' : 'Load More'}
                    </button>
                </div>
            )} */}
        </Fragment>
    );
};

export default CoinList;
